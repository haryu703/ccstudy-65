{
  "contractName": "Mecenas",
  "constructorInputs": [
    {
      "name": "recipient",
      "type": "bytes20"
    },
    {
      "name": "funder",
      "type": "bytes20"
    },
    {
      "name": "pledge",
      "type": "int"
    },
    {
      "name": "period",
      "type": "int"
    }
  ],
  "abi": [
    {
      "name": "receive",
      "covenant": true,
      "inputs": [
        {
          "name": "pk",
          "type": "pubkey"
        },
        {
          "name": "s",
          "type": "sig"
        }
      ]
    },
    {
      "name": "reclaim",
      "covenant": false,
      "inputs": [
        {
          "name": "pk",
          "type": "pubkey"
        },
        {
          "name": "s",
          "type": "sig"
        }
      ]
    }
  ],
  "bytecode": "OP_4 OP_PICK OP_0 OP_NUMEQUAL OP_IF OP_5 OP_PICK OP_NOP 68 OP_SPLIT OP_NIP OP_SIZE 34 OP_SUB OP_SPLIT OP_8 OP_SPLIT OP_4 OP_SPLIT OP_NIP 20 OP_SPLIT OP_DROP OP_10 OP_ROLL OP_10 OP_ROLL OP_2DUP OP_SWAP OP_SIZE OP_1SUB OP_SPLIT OP_DROP OP_12 OP_ROLL OP_SHA256 OP_ROT OP_CHECKDATASIGVERIFY OP_CHECKSIGVERIFY OP_6 OP_ROLL OP_CHECKSEQUENCEVERIFY OP_DROP e803 OP_ROT OP_BIN2NUM OP_DUP OP_7 OP_PICK OP_3 OP_PICK OP_ADD OP_LESSTHANOREQUAL OP_IF OP_2DUP OP_SWAP OP_SUB OP_8 OP_NUM2BIN OP_DUP 1976a914 OP_CAT OP_6 OP_PICK OP_CAT 88ac OP_CAT OP_DUP OP_HASH256 OP_5 OP_PICK OP_EQUALVERIFY OP_2DROP OP_ELSE OP_6 OP_PICK OP_8 OP_NUM2BIN OP_OVER OP_8 OP_PICK OP_SUB OP_3 OP_PICK OP_SUB OP_8 OP_NUM2BIN OP_OVER 1976a914 OP_CAT OP_7 OP_PICK OP_CAT 88ac OP_CAT OP_OVER 17a914 OP_CAT OP_7 OP_PICK OP_HASH160 OP_CAT 87 OP_CAT OP_2DUP OP_CAT OP_HASH256 OP_7 OP_PICK OP_EQUALVERIFY OP_2DROP OP_2DROP OP_ENDIF OP_2DROP OP_2DROP OP_2DROP OP_2DROP OP_1 OP_ELSE OP_4 OP_ROLL OP_1 OP_NUMEQUALVERIFY OP_4 OP_PICK OP_HASH160 OP_ROT OP_EQUALVERIFY OP_4 OP_ROLL OP_4 OP_ROLL OP_CHECKSIG OP_NIP OP_NIP OP_NIP OP_ENDIF",
  "source": "pragma cashscript ^0.6.0;\n// original: https://cashscript.org/docs/releases/migration-notes#v06-to-v07\n\ncontract Mecenas(bytes20 recipient, bytes20 funder, int pledge, int period) {\n    function receive(pubkey pk, sig s) {\n        require(checkSig(s, pk));\n        require(tx.age >= period);\n\n        int minerFee = 1000;\n        int intValue = int(bytes(tx.value));\n\n        if (intValue <= pledge + minerFee) {\n            // The contract has less value than the pledge, or equal.\n            // The recipient must claim all of of it.\n\n            bytes8 amount1 = bytes8(intValue - minerFee);\n            bytes34 out1 = new OutputP2PKH(amount1, recipient);\n            require(hash256(out1) == tx.hashOutputs);\n        } else {\n            // The contract has more value than the pledge. The recipient must\n            // also add one change output sending the remaining coins back\n            // to the contract.\n\n            bytes8 amount1 = bytes8(pledge);\n            bytes8 amount2 = bytes8(intValue - pledge - minerFee);\n            bytes34 out1 = new OutputP2PKH(amount1, recipient);\n            bytes32 out2 = new OutputP2SH(amount2, hash160(tx.bytecode));\n            require(hash256(out1 + out2) == tx.hashOutputs);\n        }\n    }\n\n    function reclaim(pubkey pk, sig s) {\n        require(hash160(pk) == funder);\n        require(checkSig(s, pk));\n    }\n}\n",
  "compiler": {
    "name": "cashc",
    "version": "0.6.0"
  },
  "updatedAt": "2022-05-29T01:16:13.817Z"
}